# -*- coding: utf-8 -*-
"""cashier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iE5XPUBznbx-IuM-WVIErNSmzBhVDlgp
"""

# import library yang akan digunakan dalam membuat tabel
from tabulate import tabulate

class Transaction:
  # inisialisasi class Transaction
  def __init__(self):
    self.order_items = {}

  def add_item(self, item_name, item_qty, item_price):
    """fungsi untuk menambahkan item ke dalam daftar pesanan,
    costumer akan menginputkan nama item, jumlah item dan harga item
    """
    if type(item_qty)!=int:
      print("Jumlah item harus berupa angka!")
    elif type(item_price)!=int:
      print("Harga harus berupa angka!")
    else:
      self.order_items.update({item_name: [item_qty, item_price]})
      print(f"Berhasil menambahkan item '{item_name}' sebanyak {item_qty} item dengan harga Rp{item_price:,} per itemnya")

  def update_item_name(self, item_name, new_item_name):
    """fungsi untuk mengubah nama item yang dipesan,
    dibutuhkan nama item yang akan diubah dan nama item yang baru untuk menjalankan fungsi ini
    """
    temp = self.order_items[item_name]
    self.order_items.pop(item_name)
    self.order_items.update({new_item_name:temp})
    print(f"Pesanan '{item_name}' berhasil diubah menjadi '{new_item_name}'")

  def update_item_qty(self, item_name, new_item_qty):
    """fungsi untuk mengubah jumlah item yang dipesan, dibutuhkan nama item untuk menjalankan fungsi ini
    """
    self.order_items[item_name][0] = new_item_qty
    print(f"Jumlah pada item {item_name} berhasil diubah menjadi {new_item_qty} item")

  def update_item_price(self, item_name, new_item_price):
    """fungsi untuk mengubah harga item yang dipesan, dibutuhkan nama item untuk menjalankan fungsi ini
    """
    self.order_items[item_name][1] = new_item_price
    print(f"Harga pada item {item_name} berhasil diubah menjadi Rp{new_item_price:,} per item")

  def delete_item(self, item_name):
    """fungsi untuk menghapus satu item dari daftar pesanan,
    costumer perlu menuliskan nama item yang ingin dihapus
    """
    try:
      self.order_items.pop(item_name)
      print(f"Anda berhasil menghapus item '{item_name}' dari daftar pesanan anda")
      print("")
    except KeyError:
      print(f"Item '{item_name}' tidak terdapat dalam daftar!")

  def reset_transaction(self):
    """ fungsi untuk menghapus semua item yang ada di daftar pesanan/belanja
    """
    transaction = {}
    self.order_items = transaction
    print ("Semua item dalam daftar pesanan anda sudah terhapus")

  def show_order(self):
    """fungsi untuk menampilkan item apa saja yang sudah dipesan melalui fungsi add_item() sebelumnya,
    daftar item ditampilkan dalam bentuk tabel yang berisi nomor urut pemasanan, nama item, jumlah item,
    harga per item dan total harga dari masing-masing item
    """
    show_order = []
    header = ["No.","Nama Item", "Jumlah Item", "Harga Per Item", "Total Harga"]
    show_order.append(header)

    n = 0
    for key, value in self.order_items.items():
      n += 1
      table_no = n
      item_name = key
      item_qty = value[0]
      item_price = value[1]
      total = item_qty * item_price
      item_data = [table_no, item_name, item_qty, item_price, total]
      show_order.append(item_data)

    print(tabulate(show_order, headers="firstrow")) #membuat tabel

  def check_order(self):
      """ fungsi untuk melihat kembali pesanan yang sudah ditambahkan ke dalam daftar pesanan,
      costumer dapat memastikan kembali apakah pemesanan sudah benar atau ada kesalahan dalam proses menginputkan data
      """
      for key, value in self.order_items.items():
          item_name = key
          item_qty = value[0]
          item_price = value[1]

      if type(item_name) == str and type(item_qty) == int and type(item_price) == int:
          print("Pemesananan sudah benar")
      else:
        print("Terdapat kesalahan input data/item")

  def total_price(self):
    """fungsi untuk menghitung total belanja"""
    self.total_price = 0
    for value in self.order_items.values():
      item_qty = value[0]
      item_price = value[1]
      self.total_price += (item_qty * item_price)
      get_discount, discount = self.get_discount(self.total_price)
      self.final_price = self.total_price * (1 - discount)

      if get_discount == True: #menampilkan total yang harus dibayar oleh costumer
        print(f'Anda mendapat diskon sebesar {discount * 100:.0f}% \nTotal belanja anda Rp{self.final_price:,} (sudah termasuk diskon)')
      else:
        print(f"Total yang harus Anda bayar adalah Rp{self.total_price:,}. \nBelanja lebih dari Rp200,000 bisa dapat diskon lho!")

  def get_discount(self, total_price):
    """fungsi untuk mengecek kemungkinan diskon yang diperoleh oleh costumer
    dengan ketentuan:
    - jika total belanja lebih dari Rp200,000 costumer akan mendapatkan diskon sebesar 5%
    - jika total belanja lebih dari Rp200,000 costumer akan mendapatkan diskon sebesar 8%
    - jika total belanja lebih dari Rp200,000 costumer akan mendapatkan diskon sebesar 10%
    """
    self.total_price = total_price
    if self.total_price <= 200000:
      get_discount = False
      discount = 0.0
    else:
      get_discount = True
      if self.total_price > 500000:
        discount = 0.1
      elif total_price > 300000:
        discount = 0.08
      elif total_price > 200000:
        discount = 0.05

    return get_discount, discount